# -*- coding: utf-8 -*-
"""Handgun_ObjectDetection_Yolov8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mCgPA_FOvu8zCD7iTdRuC5vepbxQ4FCa

## **Setup enviroment**

---
####Download dependices.
---
"""

!pip install ultralytics

"""---
####Necesary Libraries
---
"""

from google.colab import drive
import ultralytics
from ultralytics import YOLO
import os
import cv2

"""---
####Check for sofware and hardware
---
"""

ultralytics.checks()

drive.mount('/content/drive')

"""##**Model and Trainig**"""

# Import directory data
directory = '/content/drive/MyDrive/Pistols'

# Load Model
model = YOLO("yolov8n.yaml") # Build model from scratch

"""---
####Train model
---
"""

# Training
results = model.train(data=os.path.join(directory, "data.yaml"), epochs=50)

"""## **Prediction**"""

# Provide video path
video_path = '/content/drive/MyDrive/Pistols/hangun_vid1.mp4'
video_out = '{}_out.mp4'.format(video_path)

# Select Pretrained Model
model = YOLO('/content/best.pt')

# Capture video frames
cap = cv2.VideoCapture(video_path)
ret, frame = cap.read()
H, W, _ = frame.shape
out = cv2.VideoWriter(video_out, cv2.VideoWriter_fourcc(*'MP4V'), int(cap.get(cv2.CAP_PROP_FPS)), (W, H))

# Threshold dectection
threshold = 0.5

# Loop over frames
while ret:

    # Get predictions for the current frame using the model
    results = model(frame)[0]

    # Box coordinates
    for result in results.boxes.data.tolist():
        x1, y1, x2, y2, score, class_id = result

        if score > threshold:

            # Label with class name a cf score
            label = f'{results.names[int(class_id)].upper()}: {score:.2f}'

            # Display bounding box
            cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 4)

            # Display class name and confidence score
            cv2.putText(frame, label, (int(x1), int(y1 - 10)),
                        cv2.FONT_HERSHEY_SIMPLEX, 1.3, (0, 255, 0), 3, cv2.LINE_AA)

    # Out
    out.write(frame)

    # Next Frame
    ret, frame = cap.read()

# Release
cap.release()
out.release()
cv2.destroyAllWindows()